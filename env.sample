# Telegram Bot Token (from BotFather)
TELEGRAM_BOT_TOKEN=

# Main Database URL (choose one)
# For Supabase (PostgreSQL):
DATABASE_URL=postgresql://postgres:[YOUR-PASSWORD]@db.[YOUR-PROJECT-REF].supabase.co:5432/postgres
# For local development (SQLite):
# DATABASE_URL=sqlite:///./default.db

# Test Database URL (for local testing)
DATABASE_URL_TEST=sqlite:///./test.db

# Supabase Configuration (optional, for direct API usage)
SUPABASE_URL=https://[YOUR-PROJECT-REF].supabase.co
SUPABASE_ANON_KEY=[YOUR-ANON-KEY]
SUPABASE_SERVICE_ROLE_KEY=[YOUR-SERVICE-ROLE-KEY]

# Google Cloud Credentials (path to your service account key file)
# Set the path to your Google Cloud service account JSON file if you are using Google Cloud services.
# Example: GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/credentials.json
GOOGLE_APPLICATION_CREDENTIALS=

# Gemini AI Configuration (if using Google Generative AI)
GEMINI_PROJECT_ID=
GEMINI_LOCATION=
GEMINI_MODEL_NAME="gemini-1.0-pro-001"
GEMINI_API_KEY=

# Stripe Payment Gateway (Optional - for premium features)
# STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_SECRET_KEY=
# STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key
STRIPE_PUBLISHABLE_KEY=
# STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret
STRIPE_WEBHOOK_SECRET=
# PAYMENT_CALLBACK_URL_BASE should be your publicly accessible base URL for callbacks.
# Example: PAYMENT_CALLBACK_URL_BASE=https://your-bot-domain.com/api
PAYMENT_CALLBACK_URL_BASE=

# Payment Gateway Configuration (Stripe)
# For development: Use test keys (no real Stripe account needed)
# Test keys work immediately for testing payments without charges
STRIPE_SECRET_KEY="sk_test_51234567890abcdef"
STRIPE_PUBLISHABLE_KEY="pk_test_51234567890abcdef" 
STRIPE_WEBHOOK_SECRET="whsec_test_webhook_secret_for_development"
PAYMENT_CALLBACK_URL_BASE="http://localhost:5000"

# For production: Replace with real Stripe keys
# STRIPE_SECRET_KEY="sk_live_your_real_secret_key"
# STRIPE_PUBLISHABLE_KEY="pk_live_your_real_publishable_key"
# STRIPE_WEBHOOK_SECRET="whsec_your_real_webhook_secret"
# PAYMENT_CALLBACK_URL_BASE="https://yourdomain.com"

# Logging Configuration
LOG_LEVEL=INFO # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FILE_PATH=logs/bot.log # Path to the log file
LOG_FILE_MAX_BYTES=5242880 # Max size of the log file in bytes (e.g., 5MB)
LOG_FILE_BACKUP_COUNT=3    # Number of backup log files to keep

# Application Settings
DEFAULT_LANGUAGE=fa # Default language for the bot (ISO 639-1 code)

# Feature Flags
# Set to "True" to ignore reminder limits for all users (development mode)
IGNORE_REMINDER_LIMITS=False

# Application Environment
# Set to 'development', 'testing', or 'production'
# This can be used to load different configurations or enable/disable debug features.
APP_ENV=development 

# Flask/WSGI Configuration
PORT=5000

# Web Server Configuration for Legal Pages
LEGAL_PAGES_BASE_URL=http://45.77.155.59:8080

# Contact Information
SUPPORT_EMAIL=ai_reminder@gmail.com
SUPPORT_TELEGRAM_ID=@ai_reminder_builder

# LangSmith Configuration (Optional - for monitoring and debugging)
# Get your API key from https://smith.langchain.com/
LANGSMITH_API_KEY=
# Project name for organizing traces (defaults to "telegram-reminder-bot" if not set)
LANGSMITH_PROJECT=
# Custom LangSmith endpoint (optional, uses default if not set)
LANGSMITH_ENDPOINT=
# Enable LangSmith tracing v2 (default: True)
LANGSMITH_TRACING_V2=True 