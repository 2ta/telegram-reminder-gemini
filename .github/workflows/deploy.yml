name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -p 61208 45.77.155.59 >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      run: |
        ssh -p 61208 root@45.77.155.59 << 'EOF'
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Navigate to project directory
          cd /root/telegram_reminder_bot_project || {
            echo "‚ùå Project directory not found. Creating it..."
            mkdir -p /root/telegram_reminder_bot_project
            cd /root/telegram_reminder_bot_project
            git clone https://github.com/2ta/telegram-reminder-gemini.git .
          }
          
          echo "üì• Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          echo "üêç Setting up Python environment..."
          # Create virtual environment if it doesn't exist
          if [ ! -d ".venv" ]; then
            python3 -m venv .venv
          fi
          
          # Activate virtual environment
          source .venv/bin/activate
          
          # Upgrade pip
          pip install --upgrade pip
          
          echo "üì¶ Installing dependencies..."
          # Install requirements
          pip install -r requirements.txt
          
          echo "üóÑÔ∏è Setting up database..."
          # Initialize database if needed
          python -c "
          import sys
          sys.path.append('.')
          try:
              from src.database import init_db
              init_db()
              print('Database initialized successfully!')
          except Exception as e:
              print(f'Database setup: {e}')
          "
          
          echo "üîß Setting up systemd service..."
          # Create systemd service file
          cat > /etc/systemd/system/telegram-reminder-bot.service << 'SERVICEFILE'
          [Unit]
          Description=Telegram Reminder Bot with Gemini AI
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=/root/telegram_reminder_bot_project
          ExecStart=/root/telegram_reminder_bot_project/.venv/bin/python /root/telegram_reminder_bot_project/start_bot.py
          Restart=on-failure
          RestartSec=10
          StartLimitBurst=3
          StartLimitInterval=60
          
          # Memory Management
          MemoryHigh=500M
          MemoryMax=800M
          MemorySwapMax=0
          
          # Environment
          Environment=PYTHONUNBUFFERED=1
          
          [Install]
          WantedBy=multi-user.target
          SERVICEFILE
          
          # Reload systemd and enable service
          systemctl daemon-reload
          systemctl enable telegram-reminder-bot.service
          
          echo "üîÑ Restarting bot service..."
          # Stop existing service
          systemctl stop telegram-reminder-bot.service 2>/dev/null || true
          
          # Wait a moment
          sleep 2
          
          # Start the service
          systemctl start telegram-reminder-bot.service
          
          echo "‚úÖ Deployment completed successfully!"
          
        EOF
        
    - name: Verify deployment
      run: |
        ssh -p 61208 root@45.77.155.59 << 'EOF'
          echo "üîç Verifying deployment..."
          
          # Wait for service to start
          sleep 5
          
          # Check service status
          if systemctl is-active --quiet telegram-reminder-bot.service; then
            echo "‚úÖ Bot service is running"
            
            # Check service logs for any errors
            echo "üìã Recent service logs:"
            journalctl -u telegram-reminder-bot.service --no-pager -n 10
            
            # Check if bot is responding
            echo "üîç Checking bot process..."
            if pgrep -f "start_bot.py" > /dev/null; then
              echo "‚úÖ Bot process is running"
            else
              echo "‚ö†Ô∏è Bot process not found, but service is active"
            fi
            
          else
            echo "‚ùå Bot service is not running"
            echo "üìã Service status:"
            systemctl status telegram-reminder-bot.service --no-pager
            echo "üìã Recent logs:"
            journalctl -u telegram-reminder-bot.service --no-pager -n 20
            exit 1
          fi
        EOF 