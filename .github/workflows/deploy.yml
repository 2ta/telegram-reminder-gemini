---
name: Deploy Telegram Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} <<'EOSSH'
            set -e
            cd ${{ secrets.DEPLOY_PATH }}
            echo "üöÄ Starting deployment..."
            git fetch origin
            git reset --hard origin/main
            echo "üêç Setting up Python environment..."
            rm -rf .venv
            python3 -m venv .venv
            .venv/bin/pip install --upgrade pip
            .venv/bin/pip install -r requirements.txt
            echo "üóÑÔ∏è Setting up database..."
            cat <<'EOF' | .venv/bin/python
            import sys
            sys.path.append('.')
            try:
                from src.database import init_db
                init_db()
                print('Database initialized successfully!')
            except Exception as e:
                print(f'Database setup: {e}')
            EOF
            echo "üîß Setting up systemd service..."
            cat > /etc/systemd/system/telegram-reminder-bot.service << 'SERVICEFILE'
[Unit]
Description=Telegram Reminder Bot with Gemini AI
After=network.target

[Service]
Type=simple
User=${{ secrets.SSH_USER }}
WorkingDirectory=${{ secrets.DEPLOY_PATH }}
ExecStart=${{ secrets.DEPLOY_PATH }}/.venv/bin/python ${{ secrets.DEPLOY_PATH }}/start_bot.py
Restart=on-failure
RestartSec=10
StartLimitBurst=3
StartLimitInterval=60

# Memory Management
MemoryHigh=500M
MemoryMax=800M
MemorySwapMax=0

# Environment
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
SERVICEFILE
            systemctl daemon-reload
            systemctl enable telegram-reminder-bot.service
            echo "üîÑ Restarting bot service..."
            systemctl stop telegram-reminder-bot.service 2>/dev/null || true
            sleep 2
            systemctl start telegram-reminder-bot.service
          EOSSH

      - name: Verify deployment
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "üîç Verifying deployment..."
            sleep 5
            if systemctl is-active --quiet telegram-reminder-bot.service; then
              echo "‚úÖ Bot service is running"
              echo "üìã Recent service logs:"
              journalctl -u telegram-reminder-bot.service --no-pager -n 10
              echo "üîç Checking bot process..."
              if pgrep -f "start_bot.py" > /dev/null; then
                echo "‚úÖ Bot process is running"
              else
                echo "‚ö†Ô∏è Bot process not found, but service is active"
              fi
            else
              echo "‚ùå Bot service is not running"
              echo "üìã Service status:"
              systemctl status telegram-reminder-bot.service --no-pager
              echo "üìã Recent logs:"
              journalctl -u telegram-reminder-bot.service --no-pager -n 20
              exit 1
            fi
          EOF 