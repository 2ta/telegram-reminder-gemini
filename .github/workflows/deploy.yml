name: Deploy Telegram Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} <<'EOSSH'
            set -e
            cd ${{ secrets.DEPLOY_PATH }}
            echo "üöÄ Starting deployment..."
            git fetch origin
            git reset --hard origin/main
            echo "üêç Setting up Python environment..."
            rm -rf .venv
            sudo apt-get update
            sudo apt-get install -y build-essential libffi-dev
            python3 -m venv .venv
            .venv/bin/pip install --upgrade pip
            .venv/bin/pip install -v -r requirements.txt
            .venv/bin/pip install 'python-telegram-bot[job-queue]'
            .venv/bin/pip install langchain-community
            .venv/bin/pip list
            .venv/bin/pip freeze
            echo "üóÑÔ∏è Setting up database..."
            echo "import sys" > /tmp/init_db_script.py
            echo "sys.path.append('.')\" >> /tmp/init_db_script.py
            echo "try:" >> /tmp/init_db_script.py
            echo "    from src.database import init_db" >> /tmp/init_db_script.py
            echo "    init_db()" >> /tmp/init_db_script.py
            echo "    print('Database initialized successfully!')" >> /tmp/init_db_script.py
            echo "except Exception as e:" >> /tmp/init_db_script.py
            echo "    print(f'Database setup: {e}')" >> /tmp/init_db_script.py
            .venv/bin/python /tmp/init_db_script.py
            echo "üîß Setting up systemd service..."
            echo "[Unit]" > /etc/systemd/system/telegram-reminder-bot.service
            echo "Description=Telegram Reminder Bot with Gemini AI" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "After=network.target" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "[Service]" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "Type=simple" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "User=__SSH_USER__" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "WorkingDirectory=__DEPLOY_PATH__" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "ExecStart=__DEPLOY_PATH__/.venv/bin/python __DEPLOY_PATH__/start_bot.py" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "Restart=on-failure" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "RestartSec=10" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "StartLimitBurst=3" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "StartLimitInterval=60" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "# Memory Management" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "MemoryHigh=500M" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "MemoryMax=800M" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "MemorySwapMax=0" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "# Environment" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "Environment=PYTHONUNBUFFERED=1" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "[Install]" >> /etc/systemd/system/telegram-reminder-bot.service
            echo "WantedBy=multi-user.target" >> /etc/systemd/system/telegram-reminder-bot.service
            sed -i "s|__SSH_USER__|${{ secrets.SSH_USER }}|g" /etc/systemd/system/telegram-reminder-bot.service
            sed -i "s|__DEPLOY_PATH__|${{ secrets.DEPLOY_PATH }}|g" /etc/systemd/system/telegram-reminder-bot.service
            echo "üîç Final systemd service file:" && cat /etc/systemd/system/telegram-reminder-bot.service
            # Validate that no placeholders remain
            if grep -q '__SSH_USER__\|__DEPLOY_PATH__' /etc/systemd/system/telegram-reminder-bot.service; then
              echo "‚ùå ERROR: Placeholders remain in the systemd service file! Aborting deployment." >&2
              exit 1
            fi
            systemctl daemon-reload
            systemctl enable telegram-reminder-bot.service
            echo "üîÑ Restarting bot service..."
            systemctl stop telegram-reminder-bot.service 2>/dev/null || true
            sleep 2
            systemctl start telegram-reminder-bot.service
          EOSSH

      - name: Verify deployment
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "üîç Verifying deployment..."
            sleep 5
            if systemctl is-active --quiet telegram-reminder-bot.service; then
              echo "‚úÖ Bot service is running"
              echo "üìã Recent service logs:"
              journalctl -u telegram-reminder-bot.service --no-pager -n 10
              echo "üîç Checking bot process..."
              if pgrep -f "start_bot.py" > /dev/null; then
                echo "‚úÖ Bot process is running"
              else
                echo "‚ö†Ô∏è Bot process not found, but service is active"
              fi
            else
              echo "‚ùå Bot service is not running"
              echo "üìã Service status:"
              systemctl status telegram-reminder-bot.service --no-pager
              echo "üìã Recent logs:"
              journalctl -u telegram-reminder-bot.service --no-pager -n 20
              exit 1
            fi
          EOF 