---
alwaysApply: true
description: SSH connection information for the deployment server.
---
# Server SSH Connection Details
- Server IP: 45.77.155.59
- SSH Port: 61208
- SSH User: root
- Connection Command: ssh root@45.77.155.59 -p61208
- Note: This server is used for deploying the Telegram reminder bot

---
alwaysApply: true
description: Documentation update requirements for the project.
---
# Documentation Update Rules
- After every new feature development or significant change, update docs/FEATURES.md
- Include technical details, implementation status, and user-facing features
- Update the "Last Updated" date and "Recent Updates" section
- Document any breaking changes or configuration updates
- Keep the language specification clear: Bot UI is English-only, voice input supports Persian
- Update troubleshooting section with any new common issues 

---
alwaysApply: true
description: Deployment workflow rules and procedures.
---
# Deployment Workflow Rules
## Current Status: GitHub Actions Temporarily Disabled
- **GitHub Actions deployment workflow is currently DISABLED** (see commit 7fd7978)
- **Direct SSH deployment is REQUIRED** until GitHub Actions is re-enabled
- All deployments must be performed manually via SSH until the workflow is restored

## Direct Deployment Procedure (Current Method)
- Use SSH connection: `ssh root@45.77.155.59 -p61208`
- Pull latest code from repository
- Update dependencies if needed
- Restart the systemd service: `systemctl restart telegram-reminder-bot`
- Check service status: `systemctl status telegram-reminder-bot`

## GitHub Actions Deployment (When Re-enabled)
- The GitHub Actions deployment workflow (see .github/workflows/deploy.yml) overwrites the systemd service file on every deploy
- Any manual changes to /etc/systemd/system/telegram-reminder-bot.service will be lost on the next deployment
- The workflow uses placeholders (__SSH_USER__, __DEPLOY_PATH__) and replaces them with secrets
- If secrets are missing or incorrect, the service file will be invalid and the bot will not start
- Always check the deployment logs for errors about placeholders or systemd service file issues after deploying

---
alwaysApply: true
description: LangSmith debugging capabilities and tools.
---
# LangSmith Debugging Tools
## Available Tools
- **LangSmith Debug Tool**: `tools/langsmith_debugger.py` - Automatic debugging tool with API access
- **LangSmith MCP Tool**: `scripts/langsmith_mcp_tool.py` - Simplified interface for debugging
- **LangSmith Debug Tool**: `scripts/langsmith_debug_tool.py` - Full-featured debugging tool

## LangSmith Configuration
- **API Key**: Set in environment variables (LANGSMITH_API_KEY)
- **Project**: telegram-reminder-bot
- **Status**: âœ… Active and working on server

## Automatic Debugging Capabilities
- **Recent Traces**: Get last 5 traces automatically when debugging issues
- **Trace Analysis**: Analyze specific traces for performance and error issues
- **Performance Metrics**: Get 24-hour performance statistics
- **User Search**: Search traces by specific user ID
- **Issue Debugging**: Automatic issue detection and analysis

## Usage Instructions
- **For any bot issue**: Automatically use `tools/langsmith_debugger.py` to analyze traces
- **For performance issues**: Check metrics using the debugger
- **For user-specific issues**: Search traces by user ID
- **For general monitoring**: Get recent traces and analyze patterns

## Integration
- LangSmith is integrated into the bot's LangGraph workflow
- All traces are automatically sent to LangSmith
- Real-time monitoring and debugging available
- No manual intervention required for trace collection 