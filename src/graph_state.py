from typing import TypedDict, List, Optional, Annotated
from langgraph.graph.message import add_messages

class AgentState(TypedDict):
    """Represents the state of our LangGraph agent."""

    # Input from the user (either text or transcribed voice)
    input_text: Optional[str]

    # Original Telegram update object (might be useful for some nodes)
    # telegram_update: Optional[dict] # serializable version of Update if needed

    # User ID from Telegram
    user_id: Optional[int]

    # Determined message type ('text', 'voice', 'command', etc.)
    message_type: Optional[str]

    # Conversation history
    # Using add_messages to automatically manage the list of BaseMessages
    messages: Annotated[list, add_messages]

    # Current intent detected by NLU (e.g., 'create_reminder', 'view_reminders')
    current_intent: Optional[str]

    # Extracted entities/parameters for the current intent
    # (e.g., {"task": "buy milk", "datetime": "tomorrow 10am"})
    extracted_parameters: Optional[dict]

    # Response generated by the graph to be sent to the user
    response_text: Optional[str]

    # For error handling or specific flow control within the graph
    error_message: Optional[str]
    current_node_name: Optional[str] # To track execution path 